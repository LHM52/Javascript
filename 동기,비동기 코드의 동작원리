동기적 코드

코드가 순차적으로 실행됨
하나의 작업이 끝나야 다음 작업이 실행됨
실행 흐름이 예측 가능하지만, 작업이 오래 걸리면 블로킹(blocking) 문제 발생

비동기적 코드

작업이 끝나지 않아도 다음 작업이 실행됨
특정 작업(예: 네트워크 요청, 타이머 등)이 완료되면 나중에 실행됨
실행 흐름이 예측하기 어렵지만, 성능이 좋아지고 블로킹이 없음

콜 스택(Call Stack):

함수 실행을 저장하는 스택
동기 코드가 실행될 때 사용됨


웹 API (Web API):

setTimeout, fetch, DOM 이벤트 같은 비동기 함수가 실행되는 영역


큐(Queue):
비동기 작업이 완료되면 여기에 콜백이 대기


이벤트 루프(Event Loop):
콜 스택이 비면 큐에서 콜백을 꺼내 실행


간략한 실행과정 정리:

동기적코드와 비동기적코드를 call stack으로 보냄
동기적 코드 -> 바로 실행함
비동기적 코드 -> 이벤트 루프로 인해 Web apis로 이동 후 설정된 시간만큼 대기 (예시 : setTimeout 1000 -> 1초 대기)
->  설정된 시간만큼 대기 후 queue로 이동 후 순차적으로 대기 -> 이벤트 루프가 call stack에 남아있는 코드가 없다고 판단하면 queue에 있는 코드를 call stack으로  이동 시키고 그 코드를 실행함 
