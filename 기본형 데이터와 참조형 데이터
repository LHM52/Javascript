데이터 타입의 종류

Primitive type:
number,
String,
Boolean,
null,
undefined,
Symbol


Reference type:
Object 
Array,
Function,
Date,
RegExp,
Map WeakMap,
Set WeakSet

-------------------------------------------------
변수와 식별자
변수 : 변할 수 있는 수
식별자 : 변수명
  
-------------------------------------------------
변수선언

var a;

var -> 변할 수 있는 데이터 선언
a -> 이 데이터의 식별자
데이터 할당
var a -> 변수 a 선언
a = 'abc'; -> 변수 a에 데이터 할당

var a = 'abc' -> 변수 선언과 할당을 한 문장으로 표현
-------------------------------------------------

기본형 데이터와 참조형 데이터

  .....            기본형(Primitive)      참조형(Reference)
저장 방식          값 자체 저장           메모리 주소 저장
메모리 위치           Stack                   Heap
값 변경 여부          불변                   가변값
할당 방식            값복사              참조값(주소) 복사
값 공유 여부       X (독립적인 값)     O (같은 메모리 주소 참조)


기본형 데이터는 값 자체를 저장하고 복사하면 독립적임

참조형 데이터는 메모리 주소를 저장하고 복사하면 같은 객체를 참조함, 변경하면 원본 데이터까지 변경될 수 있음

참조형 데이터는 객체의 변수(프로퍼티) 영역이 별도로 존재함

기본형 데이터 (불변)

// 기본형 예제
let a = 10
let b = a
b = 30

a = 10 을 메모리 영역에 할당 예시 : 1001
b = a(10) 를  메모리 영역에 할당 예시 : 1002

b 는 a의 값을 복사함.

b가 저장되어 있는 메모리영역의 값을 30으로 바꿔줌 

b의 값이 a로 복사된 후 b의 값을 30으로 변경, a의 주소를 참조하지않았으니 b의 값만 변경되고 a의 값은 변경되지 않음.

참조형 데이터 

// 참조형 예제
var obj1 = { name: '이름1' };
var obj2 = obj1; // obj1의 주소를 obj2에 저장 (주소가 복사됨)
obj1.name = '이름2';

console.log(obj1.name); // '이름2'
console.log(obj2.name); // '이름2' (obj2도 같은 객체를 참조)

obj1과 obj2는 같은 메모리 주소를 가리키고 있으므로 obj1.name을 변경하면 obj2.name도 같이 바뀜.

  

  
